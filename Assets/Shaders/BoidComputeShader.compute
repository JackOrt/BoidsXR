#pragma kernel CSMain

#define SwarmType_Prey 0
#define SwarmType_Predator 1
#define SwarmType_Omnivore 2

struct BoidData
{
    float3 position;
    float3 velocity;
    int swarmType;
    int swarmID;
};

struct TriangleData
{
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

struct SwarmData
{
    int swarmID;
    int type;
    float separationWeight;
    float alignmentWeight;
    float cohesionWeight;
    float obstacleAvoidanceWeight;
    float boundaryStrength;
    float boundaryAvoidDistance;
    float4 swarmColor;
    float speed;
    float obstacleAvoidDistance;
};

struct InstanceData
{
    float4x4 transform;
    float4 color;
};

struct FoodAttractor
{
    float3 position;
    float expirationTime;
};

// Buffers
RWStructuredBuffer<BoidData> boidBuffer;
StructuredBuffer<TriangleData> triangleBuffer;
StructuredBuffer<SwarmData> swarmBuffer;
RWStructuredBuffer<InstanceData> instanceTransforms;
StructuredBuffer<FoodAttractor> foodAttractorBuffer;

// Constants
int boidCount;
int triangleCount;
int swarmCount;
int foodAttractorCount;
float deltaTime;
float3 managerPosition;
float3 boundsSize;

bool RayIntersectsTriangle(float3 rayOrigin, float3 rayDir, float3 v0, float3 v1, float3 v2, out float t, out float3 normal)
{
    float3 edge1 = v1 - v0;
    float3 edge2 = v2 - v0;
    float3 h = cross(rayDir, edge2);
    float a = dot(edge1, h);
    if (abs(a) < 1e-5)
    {
        t = 0.0;
        normal = float3(0,0,0);
        return false;
    }

    float f = 1.0 / a;
    float3 s = rayOrigin - v0;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
    {
        t = 0.0;
        normal = float3(0,0,0);
        return false;
    }

    float3 q = cross(s, edge1);
    float v = f * dot(rayDir, q);
    if (v < 0.0 || u + v > 1.0)
    {
        t = 0.0;
        normal = float3(0,0,0);
        return false;
    }

    t = f * dot(edge2, q);
    if (t > 1e-5)
    {
        normal = normalize(cross(edge1, edge2));
        return true;
    }
    else
    {
        t = 0.0;
        normal = float3(0,0,0);
        return false;
    }
}

[numthreads(256,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)boidCount) return;

    BoidData boid = boidBuffer[index];
    SwarmData swarm = swarmBuffer[boid.swarmID];

    float3 separation = float3(0,0,0);
    float3 alignment = float3(0,0,0);
    float3 cohesion = float3(0,0,0);

    float3 extraAvoidanceForce = float3(0,0,0);
    float3 extraSeekForce = float3(0,0,0);

    int neighborCount = 0;

    bool isPrey = (swarm.type == SwarmType_Prey);
    bool isPredator = (swarm.type == SwarmType_Predator);
    bool isOmnivore = (swarm.type == SwarmType_Omnivore);

    // Neighbor checks
    for (uint i = 0; i < (uint)boidCount; i++)
    {
        if (i == index) continue;

        BoidData other = boidBuffer[i];
        float3 toOther = other.position - boid.position;
        float distance = length(toOther);

        if (distance > 0 && distance < swarm.boundaryAvoidDistance)
        {
            // Apply separation, alignment, cohesion only if same type
            if (other.swarmType == boid.swarmType)
            {
                separation -= (toOther / distance);
                alignment += other.velocity;
                cohesion += other.position;
                neighborCount++;
            }

            // Avoid/seek logic
            bool avoid = false;
            bool seek = false;

            if (isPrey)
            {
                if (other.swarmType == SwarmType_Predator || other.swarmType == SwarmType_Omnivore)
                    avoid = true;
            }
            else if (isPredator)
            {
                if (other.swarmType == SwarmType_Prey || other.swarmType == SwarmType_Omnivore)
                    seek = true;
            }
            else if (isOmnivore)
            {
                if (other.swarmType == SwarmType_Predator)
                    avoid = true;
                if (other.swarmType == SwarmType_Prey)
                    seek = true;
            }

            if (avoid)
            {
                float3 dir = normalize(toOther);
                extraAvoidanceForce -= dir * 10.0;
            }

            if (seek)
            {
                float3 dir = normalize(toOther);
                extraSeekForce += dir * 0.5;
            }
        }
    }

    if (neighborCount > 0)
    {
        alignment /= neighborCount;
        alignment = normalize(alignment);

        cohesion /= neighborCount;
        cohesion = cohesion - boid.position;
    }

    // Obstacle avoidance
    float3 rayOrigin = boid.position;
    float3 rayDir = normalize(boid.velocity);

    float3 collisionNormal;
    bool obstacleDetected = false;
    float minT = swarm.obstacleAvoidDistance;

    for (uint j = 0; j < (uint)triangleCount; j++)
    {
        TriangleData tri = triangleBuffer[j];
        float t; float3 normal;
        bool hit = RayIntersectsTriangle(rayOrigin, rayDir, tri.vertexA, tri.vertexB, tri.vertexC, t, normal);
        if (hit && t < minT)
        {
            minT = t;
            collisionNormal = normal;
            obstacleDetected = true;
        }
    }

    float3 obstacleAvoidance = float3(0,0,0);
    if (obstacleDetected)
    {
        float3 velocity = boid.velocity;
        float dotProduct = dot(velocity, collisionNormal);
        float3 parallelVelocity = velocity - collisionNormal * dotProduct;
        float3 desiredVelocity = normalize(parallelVelocity) * swarm.speed;
        float3 steering = (desiredVelocity - velocity) * swarm.obstacleAvoidanceWeight;
        obstacleAvoidance += steering;
    }

    // Boundary handling
    float3 halfSize = boundsSize * 0.5f;
    float3 localPos = boid.position - managerPosition;
    float3 boundaryForce = float3(0,0,0);

    if (localPos.x > halfSize.x - swarm.boundaryAvoidDistance)
    {
        float dist = localPos.x - (halfSize.x - swarm.boundaryAvoidDistance);
        boundaryForce.x -= dist * swarm.boundaryStrength;
    }
    else if (localPos.x < -halfSize.x + swarm.boundaryAvoidDistance)
    {
        float dist = (-halfSize.x + swarm.boundaryAvoidDistance) - localPos.x;
        boundaryForce.x += dist * swarm.boundaryStrength;
    }

    if (localPos.y > halfSize.y - swarm.boundaryAvoidDistance)
    {
        float dist = localPos.y - (halfSize.y - swarm.boundaryAvoidDistance);
        boundaryForce.y -= dist * swarm.boundaryStrength;
    }
    else if (localPos.y < -halfSize.y + swarm.boundaryAvoidDistance)
    {
        float dist = (-halfSize.y + swarm.boundaryAvoidDistance) - localPos.y;
        boundaryForce.y += dist * swarm.boundaryStrength;
    }

    if (localPos.z > halfSize.z - swarm.boundaryAvoidDistance)
    {
        float dist = localPos.z - (halfSize.z - swarm.boundaryAvoidDistance);
        boundaryForce.z -= dist * swarm.boundaryStrength;
    }
    else if (localPos.z < -halfSize.z + swarm.boundaryAvoidDistance)
    {
        float dist = (-halfSize.z + swarm.boundaryAvoidDistance) - localPos.z;
        boundaryForce.z += dist * swarm.boundaryStrength;
    }

    // Food attraction only for Prey and Omnivores
    float3 foodAttraction = float3(0,0,0);
    if (foodAttractorCount > 0 && (isPrey || isOmnivore))
    {
        for (uint f = 0; f < (uint)foodAttractorCount; f++)
        {
            FoodAttractor fa = foodAttractorBuffer[f];
            float3 toFood = fa.position - boid.position;
            float distance = length(toFood);
            if (distance > 0 && distance < swarm.boundaryAvoidDistance)
            {
                float3 dir = normalize(toFood);
                float attractionStrength = 1.0 / distance;
                foodAttraction += dir * attractionStrength;
            }
        }
    }

    float3 acceleration = float3(0,0,0);
    acceleration += separation * swarm.separationWeight;
    acceleration += alignment * swarm.alignmentWeight;
    acceleration += cohesion * swarm.cohesionWeight;
    acceleration += obstacleAvoidance;
    acceleration += boundaryForce;
    acceleration += extraAvoidanceForce;
    acceleration += extraSeekForce;

    if (isPrey || isOmnivore)
    {
        acceleration += foodAttraction * 5.0f; // Adjust as needed
    }

    boid.velocity += acceleration * deltaTime;
    if (length(boid.velocity) > 0.0)
    {
        boid.velocity = normalize(boid.velocity) * swarm.speed;
    }

    boid.position += boid.velocity * deltaTime;

    boidBuffer[index] = boid;

    float3 forward = normalize(boid.velocity);
    float3 up = float3(0, 1, 0);
    float3 right = normalize(cross(up, forward));
    up = cross(forward, right);

    float4x4 transformMatrix = float4x4(
        float4(right, 0.0),
        float4(up, 0.0),
        float4(forward, 0.0),
        float4(boid.position, 1.0)
    );

    InstanceData instance;
    instance.transform = transformMatrix;
    instance.color = swarm.swarmColor;

    instanceTransforms[index] = instance;
}
